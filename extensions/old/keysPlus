// Name : Keys+
// Author : EnderStudios
// Description : a more useful key detecting blocks
// Version : 1.0
// License : MIT

(function (Scratch) {
    "use strict"

    if (!Scratch.extensions.unsandboxed) throw new Error("Keys+ must run unsandboxed")

    const runtime = Scratch.vm.runtime

    const createLabel = (text) => ({ blockType: Scratch.BlockType.LABEL, text: text })

    const _validKeys = [ "space", "up arrow", "down arrow", "right arrow", "left arrow", "backspace", "enter", "any", "right shift", "left shift", "right control", "left control", "right alt", "left alt", "right windows key", "left windows key", "context menu", "escape", "tab", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "`", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "+", "=", "[", "]", "{", "}", "\\", "|", ";", ":", "'", "\"", ",", ".", "/", "?", "<", ">", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "caps lock", "scroll lock", "num lock", "insert", "delete", "home", "end", "page up", "page down", "numpad: divide", "numpad: multiply", "numpad: subtract", "numpad: add", "numpad: 0", "numpad: 1", "numpad: 2", "numpad: 3", "numpad: 4", "numpad: 5", "numpad: 6", "numpad: 7", "numpad: 8", "numpad: 9", "numpad: decimal", "numpad: enter" ]
    const _convertToValue = [ "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "Digit0", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "KeyA", "KeyB", "KeyC", "KeyD", "KeyE", "KeyF", "KeyG", "KeyH", "KeyI", "KeyJ", "KeyK", "KeyL", "KeyM", "KeyN", "KeyO", "KeyP", "KeyQ", "KeyR", "KeyS", "KeyT", "KeyU", "KeyV", "KeyW", "KeyX", "KeyY", "KeyZ", "Backquote", "Minus", "Equal", "BracketLeft", "BracketRight", "Backslash", "Semicolon", "Quote", "Comma", "Period", "Slash" ]
    const _hasMultiple = [ "control", "shift", "alt", "meta", "arrow"]

    const formatName = (name, val) => { 
        if (_convertToValue.includes(name)) return val
        const n = name.replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase()
        return _hasMultiple.some(item => n.includes(item)) ? n.split(" ").reverse().join(" ").replace("meta", "windows key") : n.startsWith("numpad") ? n.replace("numpad", "numpad: ").replace("  ", " ") : n
    }

    let keysPressed = {}
    let keybinds = {}

    const _keysPressed = () => Object.keys(keysPressed)

    class enderKeysPlus {
        constructor() {
            runtime.on("BEFORE_EXECUTE", () => { runtime.startHats("enderKeysPlus_whenKeyPressed") } )
            this._currentKey = "None"
            this._currentKeyValue = "None"
            window.addEventListener("keydown", e => this._updateKey(e))
            window.addEventListener("keyup", e => this._clearKey(e))
        }
        _updateKey(e) { keysPressed[formatName(e.code, e.key)] = true; this._currentKey = e.code; this._currentKeyValue = e.key }
        _clearKey(e) { const key = formatName(e.code, e.key); if (keysPressed[key]) delete keysPressed[key]; if (this._currentKey === e.code) { this._currentKey = "None"; this._currentKeyValue = "None" } }

        getInfo() {
            return {
                id: "enderKeysPlus",
                name: "Keys+",
                color1: "#647970",
                color2: "#4d5e56",
                blocks: [
                    { opcode: "eventKeyPressed", blockType: Scratch.BlockType.HAT, text: "while [key] key pressed", isEdgeActivated: false, arguments: { key: { type: Scratch.ArgumentType.STRING, menu: "keys" } } },
                    { opcode: "eventKeyHit", blockType: Scratch.BlockType.HAT, text: "when [key] key hit", arguments: { key: { type: Scratch.ArgumentType.STRING, menu: "keys" } } },
                    "---",
                    { opcode: "isKeyPressed", blockType: Scratch.BlockType.BOOLEAN, text: "is [key] key pressed?", arguments: { key: { type: Scratch.ArgumentType.STRING, menu: "keys" } } },
                    "---",
                    { opcode: "currentKeyPressed", blockType: Scratch.BlockType.REPORTER, text: "current key pressed" },
                    { opcode: "currentKeyProperty", blockType: Scratch.BlockType.REPORTER, text: "current key [property]", disableMonitor: true, arguments: { property: { type: Scratch.ArgumentType.STRING, menu: "property" } } },
                    "---",
                    { opcode: "keysPressed", blockType: Scratch.BlockType.REPORTER, text: "keys pressed" },
                    createLabel("Keybinding"),
                    { opcode: "isKeybindTriggered", blockType: Scratch.BlockType.BOOLEAN, text: "[event] triggered?", arguments: { event: { type: Scratch.ArgumentType.STRING, defaultValue: "action" } } },
                    "---",
                    { opcode: "keybindBind", blockType: Scratch.BlockType.COMMAND, text: "bind [trigger] key to [event]", arguments: { trigger: { type: Scratch.ArgumentType.STRING, menu: "keys" }, event: { type: Scratch.ArgumentType.STRING, defaultValue: "action"} } },
                    { opcode: "keybindUnbind", blockType: Scratch.BlockType.COMMAND, text: "unbind [trigger] key from [event]", arguments: { trigger: { type: Scratch.ArgumentType.STRING, menu: "keys" }, event: { type: Scratch.ArgumentType.STRING, defaultValue: "action"} } },
                    "---",
                    { opcode: "keybindBindMultiple", blockType: Scratch.BlockType.COMMAND, text: "bind ［[triggers]］ keys to [event]", arguments: { triggers: { type: Scratch.ArgumentType.STRING, defaultValue: "" }, event: { type: Scratch.ArgumentType.STRING, defaultValue: "action"} } },
                    { opcode: "keybindUnbindMultiple", blockType: Scratch.BlockType.COMMAND, text: "unbind ［[triggers]］ keys from [event]", arguments: { triggers: { type: Scratch.ArgumentType.STRING, defaultValue: "" }, event: { type: Scratch.ArgumentType.STRING, defaultValue: "action"} } },
                    "---",
                    { opcode: "keybindGetNames", blockType: Scratch.BlockType.REPORTER, text: "used keybinds" },
                    { opcode: "keybindGetUses", blockType: Scratch.BlockType.REPORTER, text: "keybinds that uses [key]", arguments: { key: { type: Scratch.ArgumentType.STRING, menu: "keys" } } },
                    "---",
                    { opcode: "keybindReset", blockType: Scratch.BlockType.COMMAND, text: "reset all keys for [event]", arguments: { event: { type: Scratch.ArgumentType.STRING, defaultValue: "action"} } },
                    { opcode: "keybindResetAll", blockType: Scratch.BlockType.COMMAND, text: "reset all keybinds", arguments: { event: { type: Scratch.ArgumentType.STRING, defaultValue: "action"} } },
                ],
                menus: {
                    keys: { acceptReporters: true, items: _validKeys },
                    property: { items: [ "code", "value" ]}
                }
            }
        }
        eventKeyPressed(args) { return _keysPressed().includes(args.key) ? true : false }
        eventKeyHit(args) { return args.key === "any" ? _keysPressed().length !== 0 : _keysPressed().includes(args.key) }

        keybindGetUses(args)  { return JSON.stringify(Object.keys(keybinds).filter(e => keybinds[e].some(k => k.includes(args.key)))); }
        keybindGetNames() { return JSON.stringify(Object.keys(keybinds)) }
        keybindBindMultiple(args) { let v = _validKeys.concat("#IgnoreOrder"), i = String(args.triggers), t = /^\[.*\]$/.test(i) ? i : `[${i}]`; try { let k = JSON.parse(t).filter(x => v.includes(x)), g = k.includes("#IgnoreOrder"), f = g ? k.filter(x => x !== "#IgnoreOrder") : k; if (k.length > 0) { if (!keybinds[args.event]) keybinds[args.event] = []; if (!keybinds[args.event].some(e => g ? e.includes("#IgnoreOrder") && f.every(x => e.includes(x)) : e.length === f.length && e.every((y, j) => y === f[j]))) keybinds[args.event].push(k) } } catch {} }
        keybindUnbindMultiple(args) { let v = _validKeys.concat("#IgnoreOrder"), i = String(args.triggers), t = /^\[.*\]$/.test(i) ? i : `[${i}]`; try { let k = JSON.parse(t).filter(x => v.includes(x)), g = k.includes("#IgnoreOrder"), f = g ? k.filter(x => x !== "#IgnoreOrder") : k; if (k.length > 0 && keybinds[args.event]) keybinds[args.event] = keybinds[args.event].filter(e => g ? !(e.includes("#IgnoreOrder") && f.every(x => e.includes(x))) : !(e.length === f.length && e.every((y, j) => y === f[j]))) } catch {} }

        keybindBind(args) {  let e = keybinds[args.event] = (keybinds[args.event] || []); if (!e.some(x => x.includes(args.trigger))) e.push([args.trigger]) }          
        keybindUnbind(args) {  keybinds[args.event] = (keybinds[args.event] || []).filter(k => !(k.length === 1 && k[0] === args.trigger)) }
          
        keybindReset(args) { keybinds[args.event] = [] }
        keybindResetAll() { keybinds = {} }

        isKeybindTriggered(args) { const k = _keysPressed(); if (!keybinds[args.event]) return false; return keybinds[args.event].some(e => { const i = e.includes("#IgnoreOrder"); const f = i ? e.filter(x => x !== "#IgnoreOrder") : e; if (i) { return f.every(x => k.includes(x)) } return f.length === k.length && f.every((x, j) => x === k[j]) }) }
              
        keysPressed() { return JSON.stringify(_keysPressed()) }

        isKeyPressed(args) { return args.key === "any" ? _keysPressed().length !== 0 : _keysPressed().includes(args.key) }

        currentKeyPressed() { return _keysPressed()[_keysPressed().length - 1] || "None" }
        currentKeyProperty(args) { return args.property === "code" ? this._currentKey : this._currentKeyValue }
    }

    Scratch.extensions.register(new enderKeysPlus())
})(Scratch)
