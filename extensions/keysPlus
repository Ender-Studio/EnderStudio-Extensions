// Name : Keys+
// Author : EnderStudios
// Description : a more useful key detector blocks
// Version : 1.0
// License : MIT

( function (Scratch) {
    "use strict"

    const _convertToValue = [ "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "Digit0", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "KeyA", "KeyB", "KeyC", "KeyD", "KeyE", "KeyF", "KeyG", "KeyH", "KeyI", "KeyJ", "KeyK", "KeyL", "KeyM", "KeyN", "KeyO", "KeyP", "KeyQ", "KeyR", "KeyS", "KeyT", "KeyU", "KeyV", "KeyW", "KeyX", "KeyY", "KeyZ", "Backquote", "Minus", "Equal", "BracketLeft", "BracketRight", "Backslash", "Semicolon", "Quote", "Comma", "Period", "Slash" ]
    
    const formatName = (name) => { 
        const n = String(name).replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase().replace("meta", "windows key")
        if (n.endsWith("right") || n.endsWith("left")) { return n.split(" ").reverse().join(" ") }
        if (n.startsWith("numpad")) { return n.replace("numpad", "numpad: ").replace("  ", " ") }
        return n
    }

    class enderKeysPlus {
        constructor() {
            this._currentKey = "None"
            this._currentKeyValue = "None"
            window.addEventListener("keydown", e => this._updateKey(e))
            window.addEventListener("keyup", e => this._clearKey(e))
        }
        _updateKey(e) { this._currentKey = e.code; this._currentKeyValue = e.key }
        _clearKey(e) { if (this._currentKey === e.code) { this._currentKey = "None"; this._currentKeyValue = "None" } }

        getInfo() {
            return {
                id: "enderKeysPlus",
                name: "Keys+",
                color1: "#647970",
                color2: "#4d5e56",
                blocks: [
                    { opcode: "whenKeyPressed", blockType: Scratch.BlockType.HAT, text: "when [key] key pressed", arguments: { key: { type: Scratch.ArgumentType.STRING, menu: "keys" } } },
                    "---",
                    { opcode: "isKeyPressed", blockType: Scratch.BlockType.BOOLEAN, text: "is [key] key pressed?", arguments: { key: { type: Scratch.ArgumentType.STRING, menu: "keys" } } },
                    "---",
                    { opcode: "currentKeyPressed", blockType: Scratch.BlockType.REPORTER, text: "current key pressed" },
                    { opcode: "currentKeyProperty", blockType: Scratch.BlockType.REPORTER, text: "current key [property]", arguments: { property: { type: Scratch.ArgumentType.STRING, menu: "mode" } } },
                ],
                menus: {
                    keys: { acceptReporters: true, items: [ "space", "up arrow", "down arrow", "right arrow", "left arrow", "backspace", "enter", "any", "right shift", "left shift", "right control", "left control", "right alt", "left alt", "right windows key", "left windows key", "context menu", "escape", "tab", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "`", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "+", "=", "[", "]", "{", "}", "\\", "|", ";", ":", "'", "\"", ",", ".", "/", "?", "<", ">", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "caps lock", "scroll lock", "num lock", "numpad: divide", "numpad: multiply", "numpad: subtract", "numpad: add", "numpad: 0", "numpad: 1", "numpad: 2", "numpad: 3", "numpad: 4", "numpad: 5", "numpad: 6", "numpad: 7", "numpad: 8", "numpad: 9", "numpad: decimal", "numpad: enter" ] },
                    mode: { items: [ "code", "value" ]}
                }
            }
        }
        whenKeyPressed(args) { const key = this.currentKeyPressed(); if (args.key == "any") { return key != "None" } else { return args.key === key } }

        isKeyPressed(args) { const key = this.currentkeyPressed(); return args.key == "any"? key != "None" : args.key === key }

        currentKeyPressed() { const key = this._currentKey; return _convertToValue.includes(key) ? this._currentKeyValue : key === "None" ? key : formatName(key) }
        currentKeyProperty(args) { const out = args.mode == "code" ? this._currentKey : this._currentKeyValue; return out == "None" ? "No Keys Pressed" : out }
        
    }

    Scratch.extensions.register(new enderKeysPlus())
} ) (Scratch)
